name: CI/CD Pipeline

on:
  push:
    branches:
      - dev
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  # Step 1: SonarQube Analysis
  sonarqube:
    name: SonarQube
    runs-on: ubuntu-latest  # Changed to Ubuntu for consistency
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures complete history for better analysis

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: "https://sonarcloud.io"

      # Enforce SonarQube Quality Gate
      - name: Enforce SonarQube Quality Gate
        run: |
          SONAR_STATUS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "https://sonarcloud.io/api/qualitygates/project_status?projectKey=my-project" \
            | jq -r '.projectStatus.status')
          if [[ "$SONAR_STATUS" != "OK" ]]; then
            echo "‚ùå SonarQube Quality Gate Failed"
            exit 1
          fi
        shell: bash

  # Step 2: Backend Build & Deploy (Only if SonarQube Passes)
  backend:
    needs: [sonarqube]  # Ensures SonarQube runs first
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Dependencies (Backend)
        working-directory: ./backend
        run: npm install

      - name: Build Backend Docker Image
        run: docker build -t my-project-backend ./backend

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Tag & Push Backend Docker Image
        run: |
          docker tag my-project-backend docker.io/akash3103/my-project-backend:latest
          docker push docker.io/akash3103/my-project-backend:latest

  # Step 3: Frontend Build & Deploy (Only if SonarQube Passes)
  frontend:
    needs: [sonarqube]  # Ensures SonarQube runs first
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Dependencies (Frontend)
        working-directory: ./frontend
        run: npm install

      - name: Build Frontend
        working-directory: ./frontend
        run: npm run build

      - name: Build Frontend Docker Image
        run: docker build -t my-project-frontend ./frontend

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Tag & Push Frontend Docker Image
        run: |
          docker tag my-project-frontend docker.io/akash3103/my-project-frontend:latest
          docker push docker.io/akash3103/my-project-frontend:latest

  # Step 4: Cleanup
  cleanup:
    needs: [backend, frontend]  # Ensures cleanup happens after both builds
    runs-on: ubuntu-latest
    steps:
      - name: Clean up Docker images
        run: docker system prune -f
