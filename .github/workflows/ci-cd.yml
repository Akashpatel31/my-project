name: CI/CD Pipeline

# Trigger the workflow on push to the 'main' branch or any other branch you choose
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Define the environment for the jobs
jobs:
  build:
    runs-on: ubuntu-latest  # Use the latest Ubuntu image for the environment

    steps:
    - name: Checkout code
      uses: actions/checkout@v2  # Checkout the code from the repository

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'  # Set the Node.js version you want to use

    - name: Install dependencies (Backend)
      working-directory: ./backend
      run: |
        npm install  # Install backend dependencies

    - name: Install dependencies (Frontend)
      working-directory: ./frontend
      run: |
        npm install  # Install frontend dependencies

    - name: Run tests (Backend)
      working-directory: ./backend
      run: |
        npm test  # Run backend tests if you have any (or skip this step if not)

    - name: Run tests (Frontend)
      working-directory: ./frontend
      run: |
        npm test  # Run frontend tests if you have any (or skip this step if not)

    - name: Build Frontend
      working-directory: ./frontend
      run: |
        npm run build  # Build frontend app

    - name: Build Docker image for Backend
      run: |
        docker build -t my-backend ./backend  # Build backend Docker image

    - name: Build Docker image for Frontend
      run: |
        docker build -t my-frontend ./frontend  # Build frontend Docker image

    - name: Push Docker images to Docker Hub
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker push my-backend  # Push backend image to Docker Hub
        docker push my-frontend  # Push frontend image to Docker Hub

    - name: Deploy Docker containers to production
      run: |
        ssh user@your-server "docker pull my-backend && docker pull my-frontend && docker-compose up -d"
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

  # Optionally add a deployment job for Kubernetes or any cloud provider if necessary
